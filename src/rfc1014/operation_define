##  Procedure 0: NULL - No Operation
##  Procedure 1: COMPOUND - COMPOUND Operations

   struct COMPOUND4args {
           utf8str_cs      tag;
           uint32_t        minorversion;
           nfs_argop4      argarray<>;
   };

   struct COMPOUND4res {
           nfsstat4        status;
           utf8str_cs      tag;
           nfs_resop4      resarray<>;
   };
##  Operation 3: ACCESS - Check Access Rights

   struct ACCESS4args {

           uint32_t        access;
   };
struct ACCESS4resok {
           uint32_t        supported;
           uint32_t        access;
   };

   union ACCESS4res switch (nfsstat4 status) {
    case NFS4_OK:
            ACCESS4resok   resok4;
    default:
            void;
   };
##  Operation 4: CLOSE - Close File
struct CLOSE4args {

           seqid4          seqid;
           stateid4        open_stateid;
   };
union CLOSE4res switch (nfsstat4 status) {
    case NFS4_OK:
            stateid4       open_stateid;
    default:
            void;
   };
##  Operation 5: COMMIT - Commit Cached Data
struct COMMIT4args {

           offset4         offset;
           count4          count;
   };
struct COMMIT4resok {
           verifier4       writeverf;
   };

   union COMMIT4res switch (nfsstat4 status) {
    case NFS4_OK:
            COMMIT4resok   resok4;
    default:
            void;
   };
##  Operation 6: CREATE - Create a Non-regular File Object
union createtype4 switch (nfs_ftype4 type) {
    case NF4LNK:
            linktext4 linkdata;
    case NF4BLK:
    case NF4CHR:
            specdata4 devdata;
    case NF4SOCK:
    case NF4FIFO:
    case NF4DIR:
            void;
    default:
            void;
   };

   struct CREATE4args {

           createtype4     objtype;
           component4      objname;
           fattr4          createattrs;
   };
struct CREATE4resok {
           change_info4    cinfo;
           bitmap4         attrset;
   };

   union CREATE4res switch (nfsstat4 status) {
    case NFS4_OK:
            CREATE4resok resok4;
    default:
            void;
   };
##  Operation 7: DELEGPURGE - Purge Delegations Awaiting Recovery
struct DELEGPURGE4args {
           clientid4       clientid;
   };
struct DELEGPURGE4res {
           nfsstat4        status;
   };
##  Operation 8: DELEGRETURN - Return Delegation
struct DELEGRETURN4args {

           stateid4        deleg_stateid;
   };
struct DELEGRETURN4res {
           nfsstat4        status;
   };
##  Operation 9: GETATTR - Get Attributes
struct GETATTR4args {

           bitmap4         attr_request;
   };
struct GETATTR4resok {
           fattr4          obj_attributes;
   };

   union GETATTR4res switch (nfsstat4 status) {
    case NFS4_OK:
            GETATTR4resok  resok4;
    default:
            void;
   };
##  Operation 10: GETFH - Get Current Filehandle
struct GETFH4resok {
           nfs_fh4         object;
   };

   union GETFH4res switch (nfsstat4 status) {
    case NFS4_OK:
            GETFH4resok     resok4;
    default:
            void;
   };
##  Operation 11: LINK - Create Link to a File
struct LINK4args {


           component4      newname;
   };
struct LINK4resok {
           change_info4    cinfo;
   };

   union LINK4res switch (nfsstat4 status) {
    case NFS4_OK:
            LINK4resok resok4;
    default:
            void;
   };
##  Operation 12: LOCK - Create Lock


   struct open_to_lock_owner4 {
           seqid4          open_seqid;
           stateid4        open_stateid;
           seqid4          lock_seqid;
           lock_owner4     lock_owner;
   };


   struct exist_lock_owner4 {
           stateid4        lock_stateid;
           seqid4          lock_seqid;
   };

   union locker4 switch (bool new_lock_owner) {
    case TRUE:
            open_to_lock_owner4     open_owner;
    case FALSE:
            exist_lock_owner4       lock_owner;
   };
















   struct LOCK4args {

           nfs_lock_type4  locktype;
           bool            reclaim;
           offset4         offset;
           length4         length;
           locker4         locker;
   };
struct LOCK4denied {
           offset4         offset;
           length4         length;
           nfs_lock_type4  locktype;
           lock_owner4     owner;
   };

   struct LOCK4resok {
           stateid4        lock_stateid;
   };

   union LOCK4res switch (nfsstat4 status) {
    case NFS4_OK:
            LOCK4resok     resok4;
    case NFS4ERR_DENIED:
            LOCK4denied    denied;
    default:
            void;
   };
##  Operation 13: LOCKT - Test for Lock
struct LOCKT4args {

           nfs_lock_type4  locktype;
           offset4         offset;
           length4         length;
           lock_owner4     owner;
   };
union LOCKT4res switch (nfsstat4 status) {
    case NFS4ERR_DENIED:
            LOCK4denied    denied;
    case NFS4_OK:
            void;
    default:
            void;
   };
##  Operation 14: LOCKU - Unlock File
struct LOCKU4args {

           nfs_lock_type4  locktype;
           seqid4          seqid;
           stateid4        lock_stateid;
           offset4         offset;
           length4         length;
   };
union LOCKU4res switch (nfsstat4 status) {
    case NFS4_OK:
            stateid4       lock_stateid;
    default:
            void;
   };
##  Operation 15: LOOKUP - Look Up Filename
struct LOOKUP4args {

           component4      objname;
   };
struct LOOKUP4res {

           nfsstat4        status;
   };
##  Operation 16: LOOKUPP - Look Up Parent Directory
struct LOOKUPP4res {

           nfsstat4        status;
   };
##  Operation 17: NVERIFY - Verify Difference in Attributes
struct NVERIFY4args {

           fattr4          obj_attributes;
   };
struct NVERIFY4res {
           nfsstat4        status;
   };
##  Operation 18: OPEN - Open a Regular File

   union createhow4 switch (createmode4 mode) {
    case UNCHECKED4:
    case GUARDED4:
            fattr4         createattrs;
    case EXCLUSIVE4:
            verifier4      createverf;
   };


   union openflag4 switch (opentype4 opentype) {
    case OPEN4_CREATE:
            createhow4     how;
    default:
            void;
   };

   struct nfs_modified_limit4 {
           uint32_t        num_blocks;
           uint32_t        bytes_per_block;
   };

   union nfs_space_limit4 switch (limit_by4 limitby) {

    case NFS_LIMIT_SIZE:
            uint64_t               filesize;

    case NFS_LIMIT_BLOCKS:
            nfs_modified_limit4    mod_blocks;
   };


   struct open_claim_delegate_cur4 {
           stateid4        delegate_stateid;
           component4      file;
   };
















   union open_claim4 switch (open_claim_type4 claim) {

    case CLAIM_NULL:

            component4      file;

    case CLAIM_PREVIOUS:

            open_delegation_type4   delegate_type;


    case CLAIM_DELEGATE_CUR:

            open_claim_delegate_cur4        delegate_cur_info;


    case CLAIM_DELEGATE_PREV:

            component4      file_delegate_prev;
   };


   struct OPEN4args {
           seqid4          seqid;
           uint32_t        share_access;
           uint32_t        share_deny;
           open_owner4     owner;
           openflag4       openhow;
           open_claim4     claim;
   };
struct open_read_delegation4 {
    stateid4 stateid;
    bool     recall;

    nfsace4 permissions;
   };

   struct open_write_delegation4 {
    stateid4 stateid;
    bool     recall;

    nfs_space_limit4
              space_limit;

    nfsace4   permissions;
   };

   union open_delegation4 switch
      (open_delegation_type4 delegation_type) {
           case OPEN_DELEGATE_NONE:
                   void;
           case OPEN_DELEGATE_READ:
                   open_read_delegation4 read;
           case OPEN_DELEGATE_WRITE:
                   open_write_delegation4 write;
   };


   struct OPEN4resok {
    stateid4       stateid;
    change_info4   cinfo;
    uint32_t       rflags;
    bitmap4        attrset;
    open_delegation4 delegation;
   };

   union OPEN4res switch (nfsstat4 status) {
    case NFS4_OK:

            OPEN4resok      resok4;
    default:
            void;
   };

##  Operation 19: OPENATTR - Open Named Attribute Directory
struct OPENATTR4args {

           bool    createdir;
   };
struct OPENATTR4res {

           nfsstat4        status;
   };
##  Operation 20: OPEN_CONFIRM - Confirm Open
struct OPEN_CONFIRM4args {

           stateid4        open_stateid;
           seqid4          seqid;
   };
struct OPEN_CONFIRM4resok {
           stateid4        open_stateid;
   };

   union OPEN_CONFIRM4res switch (nfsstat4 status) {
    case NFS4_OK:
            OPEN_CONFIRM4resok     resok4;
    default:
            void;
   };
##  Operation 21: OPEN_DOWNGRADE - Reduce Open File Access
struct OPEN_DOWNGRADE4args {

           stateid4        open_stateid;
           seqid4          seqid;
           uint32_t        share_access;
           uint32_t        share_deny;
   };
struct OPEN_DOWNGRADE4resok {
           stateid4        open_stateid;
   };

   union OPEN_DOWNGRADE4res switch (nfsstat4 status) {
    case NFS4_OK:
            OPEN_DOWNGRADE4resok    resok4;
    default:
            void;
   };
##  Operation 22: PUTFH - Set Current Filehandle
struct PUTFH4args {
           nfs_fh4         object;
   };
struct PUTFH4res {

           nfsstat4        status;
   };
##  Operation 23: PUTPUBFH - Set Public Filehandle
struct PUTPUBFH4res {

           nfsstat4        status;
   };
##  Operation 24: PUTROOTFH - Set Root Filehandle
struct PUTROOTFH4res {

           nfsstat4        status;
   };
##  Operation 25: READ - Read from File
struct READ4args {

           stateid4        stateid;
           offset4         offset;
           count4          count;
   };
struct READ4resok {
           bool            eof;
           opaque          data<>;
   };

   union READ4res switch (nfsstat4 status) {
    case NFS4_OK:
            READ4resok     resok4;
    default:
            void;
   };
##  Operation 26: READDIR - Read Directory
struct READDIR4args {

           nfs_cookie4     cookie;
           verifier4       cookieverf;
           count4          dircount;
           count4          maxcount;
           bitmap4         attr_request;
   };
struct entry4 {
           nfs_cookie4     cookie;
           component4      name;
           fattr4          attrs;
           entry4          *nextentry;
   };

   struct dirlist4 {
           entry4          *entries;
           bool            eof;
   };

   struct READDIR4resok {
           verifier4       cookieverf;
           dirlist4        reply;
   };

   union READDIR4res switch (nfsstat4 status) {
    case NFS4_OK:
            READDIR4resok  resok4;
    default:
            void;
   };
##  Operation 27: READLINK - Read Symbolic Link
struct READLINK4resok {
           linktext4       link;
   };

   union READLINK4res switch (nfsstat4 status) {
    case NFS4_OK:
            READLINK4resok resok4;
    default:
            void;
   };
##  Operation 28: REMOVE - Remove File System Object
struct REMOVE4args {

           component4      target;
   };
struct REMOVE4resok {
           change_info4    cinfo;
   };

   union REMOVE4res switch (nfsstat4 status) {
    case NFS4_OK:
            REMOVE4resok   resok4;
    default:
            void;
   };
##  Operation 29: RENAME - Rename Directory Entry
struct RENAME4args {

           component4      oldname;

           component4      newname;
   };
struct RENAME4resok {
           change_info4    source_cinfo;
           change_info4    target_cinfo;
   };

   union RENAME4res switch (nfsstat4 status) {
    case NFS4_OK:
            RENAME4resok    resok4;
    default:
            void;
   };
##  Operation 30: RENEW - Renew a Lease
struct RENEW4args {
           clientid4       clientid;
   };
struct RENEW4res {
           nfsstat4        status;
   };
##  Operation 31: RESTOREFH - Restore Saved Filehandle
struct RESTOREFH4res {

           nfsstat4        status;
   };
##  Operation 32: SAVEFH - Save Current Filehandle
struct SAVEFH4res {

           nfsstat4        status;
   };
##  Operation 33: SECINFO - Obtain Available Security
struct SECINFO4args {

           component4      name;
   };



   struct rpcsec_gss_info {
           sec_oid4        oid;
           qop4            qop;
           rpc_gss_svc_t   service;
   };


   union secinfo4 switch (uint32_t flavor) {
    case RPCSEC_GSS:
            rpcsec_gss_info        flavor_info;
    default:
            void;
   };


   union SECINFO4res switch (nfsstat4 status) {
    case NFS4_OK:
            SECINFO4resok resok4;
    default:
            void;
   };
##  Operation 34: SETATTR - Set Attributes
struct SETATTR4args {

           stateid4        stateid;
           fattr4          obj_attributes;
   };
struct SETATTR4res {
           nfsstat4        status;
           bitmap4         attrsset;
   };
##  Operation 35: SETCLIENTID - Negotiate Client ID
struct SETCLIENTID4args {
           nfs_client_id4  client;
           cb_client4      callback;
           uint32_t        callback_ident;
   };
struct SETCLIENTID4resok {
           clientid4       clientid;
           verifier4       setclientid_confirm;
   };

   union SETCLIENTID4res switch (nfsstat4 status) {
    case NFS4_OK:
            SETCLIENTID4resok      resok4;
    case NFS4ERR_CLID_INUSE:
            clientaddr4    client_using;
    default:
            void;
   };
##  Operation 36: SETCLIENTID_CONFIRM - Confirm Client ID
struct SETCLIENTID_CONFIRM4args {
           clientid4       clientid;
           verifier4       setclientid_confirm;
   };
struct SETCLIENTID_CONFIRM4res {
           nfsstat4        status;
   };
##  Operation 37: VERIFY - Verify Same Attributes
struct VERIFY4args {

           fattr4          obj_attributes;
   };
struct VERIFY4res {
           nfsstat4        status;
   };
##  Operation 38: WRITE - Write to File

   struct WRITE4args {

           stateid4        stateid;
           offset4         offset;
           stable_how4     stable;
           opaque          data<>;
   };
struct WRITE4resok {
           count4          count;
           stable_how4     committed;
           verifier4       writeverf;
   };

   union WRITE4res switch (nfsstat4 status) {
    case NFS4_OK:
            WRITE4resok    resok4;
    default:
            void;
   };
##  Operation 39: RELEASE_LOCKOWNER - Release Lock-Owner State
struct RELEASE_LOCKOWNER4args {
           lock_owner4     lock_owner;
   };
struct RELEASE_LOCKOWNER4res {
           nfsstat4        status;
   };
##  Operation 10044: ILLEGAL - Illegal Operation
struct ILLEGAL4res {
           nfsstat4        status;
   };
##  Procedure 0: CB_NULL - No Operation
##  Procedure 1: CB_COMPOUND - COMPOUND Operations


   union nfs_cb_argop4 switch (unsigned argop) {
    case OP_CB_GETATTR:
         CB_GETATTR4args           opcbgetattr;
    case OP_CB_RECALL:
         CB_RECALL4args            opcbrecall;
    case OP_CB_ILLEGAL:            void;
   };

   struct CB_COMPOUND4args {
           utf8str_cs      tag;
           uint32_t        minorversion;
           uint32_t        callback_ident;
           nfs_cb_argop4   argarray<>;
   };
union nfs_cb_resop4 switch (unsigned resop) {
    case OP_CB_GETATTR:    CB_GETATTR4res  opcbgetattr;
    case OP_CB_RECALL:     CB_RECALL4res   opcbrecall;
    case OP_CB_ILLEGAL:    CB_ILLEGAL4res  opcbillegal;
   };

   struct CB_COMPOUND4res {
           nfsstat4        status;
           utf8str_cs      tag;
           nfs_cb_resop4   resarray<>;
   };
##  Operation 3: CB_GETATTR - Get Attributes
struct CB_GETATTR4args {
           nfs_fh4 fh;
           bitmap4 attr_request;
   };
struct CB_GETATTR4resok {
           fattr4  obj_attributes;
   };

   union CB_GETATTR4res switch (nfsstat4 status) {
    case NFS4_OK:
            CB_GETATTR4resok       resok4;
    default:
            void;
   };
##  Operation 4: CB_RECALL - Recall an Open Delegation
struct CB_RECALL4args {
           stateid4        stateid;
           bool            truncate;
           nfs_fh4         fh;
   };
struct CB_RECALL4res {
           nfsstat4        status;
   };
##  Operation 10044: CB_ILLEGAL - Illegal Callback Operation

   struct CB_ILLEGAL4res {
           nfsstat4        status;
   };